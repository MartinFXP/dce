% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_simulation.R
\name{simulate_data}
\alias{simulate_data}
\alias{simulate_data,igraph-method}
\alias{simulate_data,graphNEL-method}
\alias{simulate_data,matrix-method}
\title{Simulate data}
\usage{
simulate_data(
  graph,
  n = 100,
  dist_fun = rnbinom,
  dist_args = list(mu = 1000, size = 100),
  child_fun = rpois,
  child_args = list(),
  child_dep = "lambda",
  link_fun = negative.binomial.special()$linkfun,
  link_args = list(offset = 1),
  pop_size = 0,
  latent = 0,
  latent_fun = "unif"
)

\S4method{simulate_data}{igraph}(
  graph,
  n = 100,
  dist_fun = rnbinom,
  dist_args = list(mu = 1000, size = 100),
  child_fun = rpois,
  child_args = list(),
  child_dep = "lambda",
  link_fun = negative.binomial.special()$linkfun,
  link_args = list(offset = 1),
  pop_size = 0,
  latent = 0,
  latent_fun = "unif"
)

\S4method{simulate_data}{graphNEL}(
  graph,
  n = 100,
  dist_fun = rnbinom,
  dist_args = list(mu = 1000, size = 100),
  child_fun = rpois,
  child_args = list(),
  child_dep = "lambda",
  link_fun = negative.binomial.special()$linkfun,
  link_args = list(offset = 1),
  pop_size = 0,
  latent = 0,
  latent_fun = "unif"
)

\S4method{simulate_data}{matrix}(
  graph,
  n = 100,
  dist_fun = rnbinom,
  dist_args = list(mu = 1000, size = 100),
  child_fun = rpois,
  child_args = list(),
  child_dep = "lambda",
  link_fun = negative.binomial.special()$linkfun,
  link_args = list(offset = 1),
  pop_size = 0,
  latent = 0,
  latent_fun = "unif"
)
}
\arguments{
\item{graph}{Graph to simulate on}

\item{n}{Number of samples}

\item{dist_fun}{distribution function for nodes without parents}

\item{dist_args}{list of arguments for dist_fun}

\item{child_fun}{distribution function for nodes with parents}

\item{child_args}{list of arguments for child_fun}

\item{child_dep}{link_fun computes an output for the expression of
nodes without parents. this output is than used as input for child_fun.
child_dep defines the parameter (a a string) of child_fun, which is used for
the input. E.g., the link_fun is the identity and the child_fun is rnorm, we
usually set child_dep = "mean".}

\item{link_fun}{special link function for the negative binomial
distribution}

\item{link_args}{list of arguments for link_fun}

\item{pop_size}{numeric for the population size, e.g., pop_size=1000 adds
1000-n random genes not in the graph}

\item{latent}{number of latent variables}

\item{latent_fun}{uniform "unif" or exponential "exp" distribution of latent
coefficients}
}
\value{
graph
}
\description{
Generate data for given DAG. The flexible framework allows for different
distributions for source and child nodes. Default distributions are
negative binomial (with mean = 100 and 1/dispersion = 100), and poisson,
respectively.
}
\examples{
dag <- create_random_DAG(30, 0.2)
X <- simulate_data(dag)
}
