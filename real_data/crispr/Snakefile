import os

import pandas as pd


configfile: 'config.yaml'
workdir: config['workdir']


# gather input configuration
case_list = []
all_perturbed_genes = set()
for study_entry in os.scandir(srcdir('data/')):
    study = study_entry.name

    for counts_entry in os.scandir(study_entry):
        if 'Ctrl' in counts_entry.name:
            continue

        _, gene, treatment = counts_entry.name.split('.')[0].split('_')

        case_list.append((study, gene, treatment))
        all_perturbed_genes.add(gene)


# helper functions
def aggregate_pathway_files(wildcards):
    checkpoint_output = checkpoints.retrieve_pathways.get(**wildcards).output.pathway_dir

    pathway_list = glob_wildcards(
        os.path.join(checkpoint_output, 'csv_files/{pathway}.csv')
    ).pathway

    return expand(
        os.path.join(checkpoint_output, 'csv_files/{pathway}.csv'),
        pathway=pathway_list)


def aggregate_dce_results(wildcards):
    checkpoint_output = checkpoints.retrieve_pathways.get(**wildcards).output.pathway_dir

    pathway_template = os.path.join(checkpoint_output, 'csv_files/{pathway}.csv')
    pathway_list = glob_wildcards(pathway_template).pathway

    file_list = []
    for pathway in pathway_list:
        fname = pathway_template.format(pathway=pathway)
        df = pd.read_csv(fname)

        for study, gene, treatment in case_list:
            # check if perturbed gene occurs in pathway
            if gene in df['source'].values or gene in df['sink'].values:
                file_list.append(f'dce_results/{pathway}/{gene}/{study}/{treatment}/')

    return file_list


# rules
localrules: all, aggregate_expression_statistics, aggregate_dce_lists


rule all:
    input:
        'perturbation_analysis/all_genes/',
        'perturbation_analysis/per_gene/expression_statistics.csv',
        'performance/plots/'


checkpoint retrieve_pathways:
    output:
        pathway_dir = directory('pathways/')
    script:
        'scripts/retrieve_pathways.R'


rule analyze_perturbed_genes:
    input:
        count_wt_file = srcdir('data/epistasis/Counts_Ctrl_1.csv'),
        graph_files = aggregate_pathway_files
    output:
        out_dir = directory('perturbation_analysis/all_genes/')
    params:
        perturbed_genes = all_perturbed_genes
    script:
        'scripts/analyze_perturbed_genes.R'


rule analyze_single_perturbed_gene:
    input:
        count_wt_file = srcdir('data/{study}/Counts_Ctrl_{treatment}.csv'),
        count_mt_file = srcdir('data/{study}/Counts_{gene}_{treatment}.csv')
    output:
        out_dir = directory('perturbation_analysis/per_gene/{study}/{gene}/{treatment}/')
    resources:
        mem_mb = 10_000
    script:
        'scripts/analyze_single_perturbed_gene.R'


rule aggregate_expression_statistics:
    input:
        dir_list = [f'perturbation_analysis/per_gene/{study}/{gene}/{treatment}/'
                    for study, gene, treatment in case_list]
    output:
        fname = 'perturbation_analysis/per_gene/expression_statistics.csv'
    run:
        import pandas as pd

        df_list = []
        for dname in input.dir_list:
            tmp = pd.read_csv(os.path.join(dname, 'expression_stats.csv'))

            parts = dname.split('/')
            tmp['study'] = parts[2]
            assert tmp['perturbed.gene'].iloc[0] == parts[3]
            tmp['treatment'] = parts[4]

            df_list.append(tmp)

        pd.concat(df_list).to_csv(output.fname, index=False)


rule compute_dces:
    input:
        count_wt_file = srcdir('data/{study}/Counts_Ctrl_{treatment}.csv'),
        count_mt_file = srcdir('data/{study}/Counts_{gene}_{treatment}.csv'),
        graph_file = 'pathways/csv_files/{pathway}.csv'
    output:
        out_dir = directory('dce_results/{pathway}/{gene}/{study}/{treatment}/')
    resources:
        mem_mb = 10_000
    script:
        'scripts/compute_dces.R'


rule aggregate_dce_lists:
    input:
        dir_list = aggregate_dce_results
    output:
        fname = 'performance/dce_lists.csv'
    run:
        import pandas as pd
        from tqdm import tqdm

        df_list = []
        for dir_ in tqdm(input.dir_list):
            _, pathway, gene, study, treatment, _ = dir_.split('/')
            fname = os.path.join(dir_, f'dce_list_{pathway}_{gene}.csv')

            tmp = pd.read_csv(fname)
            tmp['study'] = study
            tmp['treatment'] = treatment
            tmp['perturbed_gene'] = gene
            tmp['pathway'] = pathway

            df_list.append(tmp)

        df = pd.concat(df_list)
        df.to_csv(output.fname, index=False)


rule compute_performance:
    input:
        fname = 'performance/dce_lists.csv'
    output:
        out_dir = directory('performance/results/')
    script:
        'scripts/compute_performance.py'


rule plot_performance:
    input:
        dname = 'performance/results/'
    output:
        out_dir = directory('performance/plots/')
    script:
        'scripts/plot_performance.py'
