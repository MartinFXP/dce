import os


configfile: 'config.yaml'
workdir: config['workdir']

base_dir = srcdir('.')  # `srcdir` in params returns `None`
study_list = os.listdir(srcdir('data/'))
all_perturbed_genes = list({e.name.split('.')[0].split('_')[1]
                            for data_dir in os.scandir(srcdir('data/'))
                            for e in os.scandir(data_dir)
                            if 'Ctrl' not in e.name})
treatment_list = [1, 2, 3]


rule all:
    input:
        'perturbation_analysis/all_genes/',
        'perturbation_analysis/per_gene/expression_statistics.csv',
        [f'dce_results/{study}/{gene}_{pathway}/{treatment}'
         for study, gene, pathway in config['cases']
         for treatment in treatment_list]


rule retrieve_pathways:
    output:
        graph_files = expand(
            'pathways/csv_files/{pathway}.csv',
            pathway=set([pathway for _, _, pathway in config['cases']]))
    params:
        pathways = set([pathway for _, _, pathway in config['cases']])
    script:
        'scripts/retrieve_pathways.R'


rule analyze_perturbed_genes:
    input:
        count_wt_file = srcdir('data/main/Counts_Ctrl_1.csv'),
        graph_files = expand(
            'pathways/csv_files/{pathway}.csv',
            pathway=set([pathway for _, _, pathway in config['cases']]))
    output:
        out_dir = directory('perturbation_analysis/all_genes/')
    params:
        all_pathways = lambda wildcards: [e.path for e in os.scandir('pathways/csv_files/')],
        perturbed_genes = all_perturbed_genes
    script:
        'scripts/analyze_perturbed_genes.R'


rule analyze_single_perturbed_gene:
    input:
        count_wt_file = srcdir('data/{study}/Counts_Ctrl_{treatment}.csv'),
        count_mt_file = srcdir('data/{study}/Counts_{gene}_{treatment}.csv')
    output:
        out_dir = directory('perturbation_analysis/per_gene/{study}/{gene}/{treatment}/')
    resources:
        mem_mb = 10_000
    script:
        'scripts/analyze_single_perturbed_gene.R'


rule aggregate_expression_statistics:
    input:
        dir_list = [f'perturbation_analysis/per_gene/{study}/{gene}/{treatment}/'
                    for study, gene, pathway in config['cases']
                    for treatment in treatment_list]
    output:
        fname = 'perturbation_analysis/per_gene/expression_statistics.csv'
    run:
        import pandas as pd

        df_list = []
        for dname in input.dir_list:
            tmp = pd.read_csv(os.path.join(dname, 'expression_stats.csv'))

            parts = dname.split('/')
            tmp['study'] = parts[2]
            assert tmp['perturbed.gene'].iloc[0] == parts[3]
            tmp['treatment'] = parts[4]

            df_list.append(tmp)

        pd.concat(df_list).to_csv(output.fname, index=False)


rule compute_dces:
    input:
        count_wt_file = srcdir('data/{study}/Counts_Ctrl_{treatment}.csv'),
        count_mt_file = srcdir('data/{study}/Counts_{gene}_{treatment}.csv'),
        graph_file = 'pathways/csv_files/{pathway}.csv'
    output:
        out_dir = directory('dce_results/{study}/{gene}_{pathway}/{treatment}')
    resources:
        mem_mb = 10_000
    script:
        'scripts/compute_dces.R'
